#+TITLE: Week 5
#+AUTHOR: Jason Gibson
#+EMAIL: jgibson37@gatech.edu

* What are we doing today
- Look at solutions from last week
- GPS
- Localization
--Sensor models and statistics
* Solutions from last week
* GPS
- Global positioning system
- Created by the military
- Triangulates postion based on multiple satellites
  - Relies on atomic clocks
  - satellites publish times and receivers use equation to find its position
    - Requires 4 satellites, typically want closer to 7
** Filters and base stations
- Make assumptions to correct for noise
- Base station (RTK, real time kinematic)
  - Assumes it is not moving
  - Have two in parallel and use this one to correct for noise
  - Global base stations
  - Can get cm accuracy
** Almanacs
- Where to look for the satellites
  - Estimated position over time stored
  - Check there first
- Based off of last location
** Localization
- Localization refers to the art of determining a robot's pose.
- The simplest method is called dead reckoning
** Dead Reckoning
- Assume that the P(robot does what it is asked | we gave a command) = 1
- We simply track our requested changes in state and sum them.
- This suffers greatly from accumulated error.
- Instead, we should incorporate information about our world through sensors
** Sensors
- Any tool we can use to incorporate new information about our world is a sensor
- However, in general, these are unreliable. 
- By modeling their behavior, we can better represent the world
** Bayes Theorem
- X = observation
- Z = evidence
- P(x|z) = P(z|x)*P(X)/P(Z)
- By controlling for the probability of erronous readings, we can model the world more effectively.
** Law of total proabability
- P(Z) = sum(P(Z|X) for X in problem space)
** Sensor model
- Consists of a probabilty distribution that gives us P(sensor|reality)
- Either continous or discrete
** Example
** How do we update this information?
- Given new sensor data, how can we calculate P(X|Z1, Z2,..., ZN)?
** Recursive Updating
- P(X|Z1->ZN) = P(ZN|X, Z1->ZN-1)*P(X|Z1->ZN-1) / P(ZN|Z1->ZN-1)
- This can be simplifed through the Markov Assumption
** Markov Assumption
- The past has no effect on the present, so P(ZN|X, Z1->ZN-1) = P(ZN|X)
** Finally
- P(X|Z1->ZN) = P(ZN|X)*P(X|Z1->ZN-1)/P(ZN)
- This rule allows us to model our sensor's tendancy to be bad
** Example
- P(open) = P(closed) = .5
- P(Z1|open) = .6
- P(Z1|closed) = .3
- P(open|Z1) = P(Z1|open)*P(open)/(P(Z1|open)*P(open) + P(Z1|closed)*P(closed))
- 	= .67
- P(closed|Z1) = 1-.67=.33
** Example Cont.
- P(open|Z1,Z2) = P(Z2|open)*P(open|Z1) / (P(Z2|open)*P(open) + P(Z2|closed)*P(closed))
- P(open|Z1,Z2) = .8
** Actions
- Sensors give us confidence as described before
- Actions cause us to lose confidence
** Stochastic Movement
- Robots typically don't do exactly what you want
** Door Example, Again
- P(open|Z1,Z2) = .8
- P(open|open,push) = .1
- P(open|closed,push) = 0
- P(closed|closed,push) = 1
- P(closed|open, push) = .9
** Cont.
- P(open|Z1,Z2, push) = P(open|open, push)*P(open|Z1,Z2) + P(open|closed, push)*P(closed|Z1,Z2)
--	= .1*.8 + 0*.2 = .08
** Big Takeaway
- Through modeling sensors, we can accurately reflect our confidence gain
- Through modeling actions, we can accurately reflect our conifdence loss
** Revist Mapping
- We use probabilistic occupancy grids, which mean we use statistics to model our confidence in what we sense and store these confidences in a grid.
** Localization
- Current solution: Kalman Filter
- Proposed solution: Particle Filter
** Particle Filters
- Particles are proposed poses
- Step one: initialze particles
- Step two: Sense
- Step three: Weight particles based on their quality based on sensor model
- Step four: Resample particles with replacement
- Step five: Move and apply motion update based on action model
- Step six: Repeat
** Challenges
- Landmark detection
- Sensor model
- Action model
** Kalman Filters
- Assumes all noise is gaussain and filters sensor readings based on that
- Essentially combines an old and new distribution to get a new mean and variance and builds a estimated distribution with those
- Relies on tuned covariance parameters that are used to determine how sensor readings vary with respect to one another
