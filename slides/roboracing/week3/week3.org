#+TITLE: Week 3
#+AUTHOR: Jason Gibson
#+EMAIL: jgibson37@gatech.edu

* What are we doing today?
- launch files
- Encoders
- PID Control

* Launch Files
#+BEGIN_NOTES
mention how it can be more human understandable. Just a shorthand for rosrun
#+END_NOTES
- XML files
- a way to launch multiple ros nodes
- recursive

* Why Launch Files

#+BEGIN_SRC shell
rosrun roboracing mapper ekf/base_link_frame=base_footprint mapper/topics=
/scan/pointcloud /usb_cam_center/line_cloud /usb_cam_left/line_cloud
max_correspondence_distance=0.1 max_iterations=30 search_radius=0.03
#+END_SRC
* Commandline
#+BEGIN_SRC shell
roslaunch [PACKAGE_NAME] FILE_NAME.launch
#+END_SRC

* Structure
- everything is encompassed in the launch tag
#+BEGIN_SRC XML
<launch>
  <!-- here -->
</launch>
#+END_SRC

* Valid Tags
#+BEGIN_NOTES
mention that these are the tags the go under the launch tag
#+END_NOTES
| tag | usage |
|-------+------|
| =node= | launches a node |
| =param= | sets up a parameter for that node|
| =remap= | remap a topic name to something else |
| =rosparam= | enables the use of YAML files for setting lots of parameters |
| =include= | includes and launches other roslaunch files |
| =env= | specify and environment variable |
| =arg= | sets a variable that can be used in the rest of the launch file |
| =group= | allows you to group nodes in a single launch file |

* <node>
| tag | usage |
|-------+------|
| =name= | the name given to that instance of a node |
| =pkg= | the package that the node is in |
| =type= | The package to launch |
| =args= | arguments to pass to node |
#+BEGIN_SRC XML
<launch>
  <node name="NODE_NAME" pkg="PKG_NAME" type="NODE_TYPE" .../>

  <node name="NODE_NAME" pkg="PKG_NAME" type="NODE_TYPE">
    <!-- tags local to this node -->
  </node>
</launch>
#+END_SRC

* <param>
| tag | usage |
|-------+------|
| =name= | the name of the parameter |
| =type= | the variable type |
| =value= | the value of the parameter |
#+BEGIN_SRC XML
<launch>
  <node name="NODE_NAME" pkg="PKG_NAME" type="NODE_TYPE">
    <param name="PARAM_NAME" type="VAR_TYPE" value="VALUE">
  </node>
</launch>
#+END_SRC

* Substitution arguments
- $(env =ENV_VAR=)
  - will set the value from environment variable
  - will fail if =ENV_VAR= is not set
- $(opentv =ENV_VAR= =default_value=)
  - will set the value from environment variable if set
  - will set default if =ENV_VAR= is not defined
- $(find =PKG_NAME=)
  - used for relative paths to files in packages
- $(arg =ARG_NAME=)
  - will set to =ARG_NAME= if it is defined in file

* Useful Commandline Arguments
| option | effect |
|-------+------|
| =--screen= | force node output to screen |
| =--dump-params= | print parameters in yaml format |
| =--nodes= | prints the nodes launched by this launch file |
| =--args= | prints the command line arguments set in launch file |

* Encoders
#+BEGIN_NOTES
keep it high level. Do an example of ticks
#+END_NOTES
- used to determine the speed of a spinning wheel
  - measure number of ticks during a time step
- 2 main types
  - optical
  - magnetic

** Optical Encoders
#+BEGIN_NOTES
sensitive to dust and broken disks
#+END_NOTES
- uses a light and a glass wheel to measure ticks
- generally a high tick count
- used by IGVC and RoboRacing
#+ATTR_HTML: :width 35%
[[file:https://i.imgur.com/d5Rx7nQ.jpg]]

** Magnetic Encoders
#+BEGIN_NOTES
uses the hall effect
#+END_NOTES
- uses magnets to measure ticks
- generally lower tick count
- requires occasional tuning
#+ATTR_HTML: :width 35%
[[file:https://automation-insights.blog/wp-content/uploads/2015/09/bml-evalkit.jpg]]

* Speaking of Motors...
- In order to drive our robot, we apply a difference in voltage across our two motors
- In essence, our entire codebase can be thought of a function approximating the correct mapping of sensor readings to voltage output

* Control loops!
- Telling our robot what to do is called controlling our robot. (Highly technical phrases, I know)
- How we decide about doing this is called a control theory.
- These typically fall into two categories - open and closed loop.

* Open Loop
- Open loop systems do not measure the system's output, and assumes that it's reaction to a new refernece is adequate.
- We do not use these, as our problems require considering the error in our responses.

* Closed Loop
- Closed loop systems use sensors to measure and correct error created by imperfect attempts at maching the reference.
- These are more stable, especially over time as they can correct some of the accumulated error that builds up do to imperfect knowlage.
- Our method of choice is PID.

* P
- We want our response to be proportional to our error.
- The P term simply kicks harder the farther we are off from our target.

* Eye
- We want our response to respond to accumulated error over time - in other words, the integral of the error.
- The I term kicks in response to the historical error, eliminating steady-state error.

* Dee
- We want our responses to be controlled and well-proportioned as rapid changes to system output create more error.
- The D term kicks against the other two terms, making sure the system's derivative does not get out of hand.

* P + Eye + Dee spells One Helluva Closed Loop Control Theory
- This system is not perfect, but it is widely used due to its ease of implementation and effectiveness.
- Let's watch MIT explain it in more detail, because they are quite smart. 
- https://www.youtube.com/watch?v=4Y7zG48uHRo

* Path Planning part Uno
- Path planning is the art of plotting a course through a map.
- It has more going on than you might think.
- We will start with mapping.

* The heck am I?
- A robots x, y, z, r, p, y in some coordinate frame is called its pose.
- These numbers describe position and orientation.
- But this is a point, and our lovable Jessi is not a simple dot.

* C-Space
- The configuration space of the robot is the space it needs to exist in the world.
- Jessi's configuration space is her turn radius and physical dimensions.
- Here's a demo: https://www.cs.unc.edu/~jeffi/c-space/robot.xhtml

* Mapping Strategies
- Occupancy grids
- Quadtrees

* Occupancy Grids
- Represent the state space by a large grid
- Each cell contains an indication of its vacancy status.
- Easy to use, but wasteful. We don't care about the state space. We care about the parts of the state space we will travel through.

* Quadtrees help with this
- Quadtrees subdivide the state space into a recursive structure that allows for variable resolution.
- This cuts down on search costs.

* Great, so we have a map. Where do we go from here?

* Next time we'll talk about searching the map for a path.
